---
import type { Tweet } from "@/data/trendingTweets";
import { Icon } from "astro-icon/components";

interface Props extends Tweet {}

const { tweetId, content, author, authorHandle, timestamp, likes, retweets, authorImage, media } = Astro.props;

// Function to truncate text at word boundaries
function truncateText(text: string, maxLength: number): string {
  if (text.length <= maxLength) return text;
  return text.slice(0, maxLength).split(' ').slice(0, -1).join(' ') + '...';
}

const isLongTweet = content.length > 280;
const truncatedContent = isLongTweet ? truncateText(content, 280) : content;
const hasMetrics = likes > 0 || retweets > 0;
const hasAuthorImage = authorImage && authorImage.length > 0;
const tweetUrl = `https://twitter.com/${authorHandle}/status/${tweetId}`;
---

<article class="bg-bgColor/50 backdrop-blur-sm rounded-xl p-4 border border-accent-one/10 hover:border-accent-one/20 transition-all">
  <div class="flex items-start space-x-3">
    <!-- Author Image -->
    {hasAuthorImage ? (
      <img 
        src={authorImage} 
        alt={`${author}'s profile`}
        class="w-10 h-10 rounded-full"
      />
    ) : (
      <div class="w-10 h-10 rounded-full bg-accent-one/10 flex items-center justify-center">
        <span class="text-accent-one text-lg font-semibold">{author.charAt(0)}</span>
      </div>
    )}
    
    <!-- Tweet Content -->
    <div class="flex-1 min-w-0 max-w-full">
      <!-- Author Info -->
      <div class="flex items-center space-x-2 flex-wrap">
        <span class="font-semibold text-textColor">{author}</span>
        <span class="text-textColor/60">@{authorHandle}</span>
        <span class="text-textColor/40">Â·</span>
        <span class="text-textColor/60">{timestamp}</span>
      </div>
      
      <!-- Tweet Text -->
      <p class="mt-1 text-textColor break-words whitespace-pre-wrap">
        <span id="tweet-content" class="inline">{truncatedContent}</span>{isLongTweet && (
          <a 
            href={tweetUrl}
            target="_blank"
            rel="noopener noreferrer"
            class="text-accent-one hover:text-accent-two inline"
          >
            Show more
          </a>
        )}
      </p>

      <!-- Media Content -->
      {media && media.length > 0 && (
        <div class="mt-3 grid gap-2 overflow-hidden" style={`grid-template-columns: repeat(${Math.min(media.length, 2)}, 1fr);`}>
          {media.map((item) => (
            <div class="relative aspect-video rounded-lg overflow-hidden">
              <img 
                src={item.url} 
                alt="Tweet media" 
                class="w-full h-full object-cover"
                loading="lazy"
              />
            </div>
          ))}
        </div>
      )}
      
      <!-- Engagement Metrics -->
      <div class="mt-3 flex items-center justify-between">
        {hasMetrics ? (
          <div class="flex items-center space-x-4 text-textColor/60">
            {retweets > 0 && (
              <div class="flex items-center space-x-1">
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M14.046 2.242l-4.148-.01h-.002c-4.374 0-7.8 3.427-7.8 7.802 0 4.098 3.186 7.206 7.465 7.37v3.828c0 .108.045.286.12.403.142.225.384.347.632.347.138 0 .277-.038.402-.118.264-.168 6.473-4.14 8.088-5.506 1.902-1.61 3.04-3.97 3.043-6.312v-.017c-.006-4.367-3.43-7.787-7.8-7.788zm3.787 12.972c-1.134.96-4.862 3.405-6.772 4.643V16.67c0-.414-.335-.75-.75-.75h-.396c-3.66 0-6.318-2.476-6.318-5.886 0-3.534 2.768-6.302 6.3-6.302l4.147.01h.002c3.532 0 6.3 2.766 6.302 6.296-.003 1.91-.942 3.844-2.514 5.176z"/>
                </svg>
                <span>{retweets.toLocaleString()}</span>
              </div>
            )}
            {likes > 0 && (
              <div class="flex items-center space-x-1">
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 21.638h-.014C9.403 21.59 1.95 14.856 1.95 8.478c0-3.064 2.525-5.754 5.403-5.754 2.29 0 3.83 1.58 4.646 2.73.814-1.148 2.354-2.73 4.645-2.73 2.88 0 5.404 2.69 5.404 5.755 0 6.376-7.454 13.11-10.037 13.157H12z"/>
                </svg>
                <span>{likes.toLocaleString()}</span>
              </div>
            )}
          </div>
        ) : (
          <div></div>
        )}
        <a 
          href={tweetUrl}
          target="_blank"
          rel="noopener noreferrer"
          class="inline-flex items-center gap-1.5 px-3 py-1.5 text-sm font-medium text-accent-one bg-accent-one/5 rounded-lg hover:bg-accent-one/10 hover:text-accent-two transition-colors"
        >
          <span>View on</span>
          <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
            <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
          </svg>
        </a>
      </div>
    </div>
  </div>
</article>

<script>
  function toggleTweetContent(button: HTMLButtonElement) {
    const contentSpan = button.previousElementSibling as HTMLSpanElement;
    const fullContent = contentSpan.getAttribute('data-full-content') || contentSpan.textContent || '';
    const truncatedContent = contentSpan.getAttribute('data-truncated-content') || '';
    
    if (button.textContent === 'Show more') {
      contentSpan.textContent = fullContent;
      button.textContent = 'Show less';
    } else {
      contentSpan.textContent = truncatedContent;
      button.textContent = 'Show more';
    }
  }

  // Initialize tweet content on page load
  document.addEventListener('DOMContentLoaded', () => {
    const tweetContents = document.querySelectorAll('#tweet-content');
    tweetContents.forEach(content => {
      const fullContent = content.textContent || '';
      if (fullContent.length > 280) {
        content.setAttribute('data-full-content', fullContent);
        content.setAttribute('data-truncated-content', fullContent.slice(0, 280).split(' ').slice(0, -1).join(' ') + '...');
      }
    });
  });
</script> 