---
import type { CollectionEntry } from "astro:content";
import Pagination from "@/components/Paginator.astro";
import PostPreview from "@/components/blog/PostPreview.astro";
import { getAllPosts, getUniqueTags, getTagUrlSafe } from "@/data/post";
import PageLayout from "@/layouts/Base.astro";
import { collectionDateSort } from "@/utils/date";
import type { GetStaticPaths, Page } from "astro";

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
	const allPosts = await getAllPosts();
	const sortedPosts = allPosts.sort(collectionDateSort);
	const uniqueTags = getUniqueTags(sortedPosts);

	// Generate paths for single tags
	const singleTagPaths = uniqueTags.flatMap((tag: string) => {
		const filterPosts = sortedPosts.filter((post) => post.data.tags.includes(tag));
		if (filterPosts.length === 0) {
			return [{
				params: { tag: getTagUrlSafe(tag) },
				props: { noPosts: true },
			}];
		}
		return paginate(filterPosts, {
			pageSize: 10,
			params: { tag: getTagUrlSafe(tag) },
		});
	});

	// Generate paths for pairs of tags
	const multiTagPaths = [];
	for (let i = 0; i < uniqueTags.length; i++) {
		for (let j = i + 1; j < uniqueTags.length; j++) {
			const tags = [uniqueTags[i], uniqueTags[j]];
			const filterPosts = sortedPosts.filter((post) => 
				tags.every((tag: string) => post.data.tags.includes(tag))
			);
			if (filterPosts.length === 0) {
				multiTagPaths.push({
					params: { tag: tags.map((t: string) => getTagUrlSafe(t)).sort().join('+') },
					props: { noPosts: true },
				});
			} else {
				multiTagPaths.push(...paginate(filterPosts, {
					pageSize: 10,
					params: { tag: tags.map((t: string) => getTagUrlSafe(t)).sort().join('+') },
				}));
			}
		}
	}

	// Generate paths for triplets of tags
	const tripleTagPaths = [];
	for (let i = 0; i < uniqueTags.length; i++) {
		for (let j = i + 1; j < uniqueTags.length; j++) {
			for (let k = j + 1; k < uniqueTags.length; k++) {
				const tags = [uniqueTags[i], uniqueTags[j], uniqueTags[k]];
				const filterPosts = sortedPosts.filter((post) => 
					tags.every((tag: string) => post.data.tags.includes(tag))
				);
				if (filterPosts.length === 0) {
					tripleTagPaths.push({
						params: { tag: tags.map((t: string) => getTagUrlSafe(t)).sort().join('+') },
						props: { noPosts: true },
					});
				} else {
					tripleTagPaths.push(...paginate(filterPosts, {
						pageSize: 10,
						params: { tag: tags.map((t: string) => getTagUrlSafe(t)).sort().join('+') },
					}));
				}
			}
		}
	}

	return [...singleTagPaths, ...multiTagPaths, ...tripleTagPaths];
};

interface Props {
	page?: Page<CollectionEntry<"post">>;
	noPosts?: boolean;
}

const { page, noPosts } = Astro.props;
const { tag } = Astro.params;

if (noPosts) {
	return Astro.redirect(`/tags/no-posts?tag=${tag}`);
}

// Find the original tags with emoji
const allPosts = await getAllPosts();
const selectedTags = (tag || '').split('+')
	.map((t: string) => {
		const originalTag = getUniqueTags(allPosts).find(ot => getTagUrlSafe(ot) === t);
		return originalTag || t;
	})
	.sort(); // Sort tags to ensure consistent order

const meta = {
	description: `View all posts with the tags - ${selectedTags.join(', ')}`,
	title: `Tags: ${selectedTags.join(', ')}`,
};

const paginationProps = {
	...(page?.url.prev && {
		prevUrl: {
			text: "← Previous Tags",
			url: page.url.prev,
		},
	}),
	...(page?.url.next && {
		nextUrl: {
			text: "Next Tags →",
			url: page.url.next,
		},
	}),
};

// Get all available tags for the tag selector
const allTags = getUniqueTags(allPosts);
---

<PageLayout meta={meta}>
	<h1 class="title mb-6 flex items-center">
		<a class="text-accent-two sm:hover:underline" href="/tags/">Tags</a>
		<span class="me-3 ms-2">→</span>
		<div class="flex flex-wrap gap-2">
			{selectedTags.map((t: string) => (
				<span class="text-2xl">#{t}</span>
			))}
		</div>
	</h1>

	<!-- Tag selector -->
	{selectedTags.length < 3 && (
		<div class="mb-8">
			<h2 class="text-lg font-medium mb-4">Filter by tags:</h2>
			<p class="text-sm text-gray-500 mb-2">Can select up to 3 tags</p>
			<div class="flex flex-wrap gap-2">
				{allTags.map((t: string) => {
					const isSelected = selectedTags.includes(t);
					const newTags = isSelected 
						? selectedTags.filter((tag: string) => tag !== t)
						: [...selectedTags, t];
					const newUrl = newTags.length > 0 
						? `/tags/${newTags.map((tag: string) => getTagUrlSafe(tag)).sort().join('+')}/`
						: '/tags/';
					return (
						<a
							href={newUrl}
							class={`px-3 py-1 rounded-full text-sm transition-colors ${
								isSelected 
									? 'bg-accent-two text-white' 
									: 'bg-accent-two/10 text-gray-500 hover:bg-accent-two/20'
							}`}
						>
							#{t}
						</a>
					);
				})}
			</div>
		</div>
	)}

	<section aria-label="Blog post list">
		<ul class="space-y-4">
			{
				page?.data.map((p) => (
					<li class="grid-cols-[auto_1fr]">
						<PostPreview post={p} />
					</li>
				))
			}
		</ul>
		<Pagination {...paginationProps} />
	</section>
</PageLayout>