---
// Astro frontmatter
import { render } from "astro:content";
import { getAllPosts } from "@/data/post";
import PostLayout from "@/layouts/BlogPost.astro";
import type { GetStaticPaths, InferGetStaticPropsType } from "astro";

export const getStaticPaths = (async () => {
	const blogEntries = await getAllPosts();
	return blogEntries.map((post) => ({
		params: { slug: post.id },
		props: { post },
	}));
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;
const { post } = Astro.props;
const { Content } = await render(post);
const fallbackReadersCount = Math.floor(Math.random() * 11) + 2;
---

<script define:vars={{ postId: post.id }}>
	window.__POST_ID__ = postId;
</script>

<script>
	let messages = [
		["Read it or regret it.", "Albert Ehh?stein"],
		["Books > Biceps.", "Arnold Shelfzenegger"],
		["Scroll smart.", "Scrollon Musk"],
		["Think faster, read shorter.", "Isaac Meh-ton"],
		["Small reads, big brains.", "Leonardo Nah Vinci"],
		["Be curious, not clueless.", "Mehrie Curie-ous"],
		["Readers gonna rule.", "Barak No-drama"],
		["Tap to evolve.", "Charles Dar-win-sometimes"],
		["Feed the brain, not the algorithm.", "Stephen NotKing"],
		["Why not read?", "William NOPESpeare"],
		["You clicked. Good choice for mankind!", "Neil Thumb-strong"],
		["Scroll less, learn more.", "Steve No-mo Jobs"],
		["Reading is my cardio.", "Taylor Sniffed"],
		["Get lit. Read lit.", "Issac Lit-ton"],
		["Hallucinating... but with confidence.", "Mark Zukerbored"],
		["AI: Because guessing is science now.", "Bill Windows"],
		["Don't measure me, bro.", "Schrodinger"],
		["Make AI Great Again!", "Donald Trump"],
	];

	function handleLoadingScreen() {
		const html = document.documentElement;
		const loadingScreen = document.getElementById("loading-screen");
		
		// Show loading state
		html.classList.add("loading");
		
		function showRandomMessage() {
			const [quote, author] = messages[Math.floor(Math.random() * messages.length)];
			document.getElementById("loading-quote").textContent = `"${quote}"`;
			document.getElementById("loading-author").textContent = `â€“ ${author}`;
		}
		
		// Initial message
		showRandomMessage();
		
		// Change message every 2 seconds
		const messageInterval = setInterval(showRandomMessage, 2000);
		
		// Remove loading screen after delay
		setTimeout(() => {
			loadingScreen.classList.add("fade-out");
			
			setTimeout(() => {
				loadingScreen.remove();
				html.classList.remove("loading");
				clearInterval(messageInterval);
				
				// Force enable scrolling
				html.style.overflow = "";
				html.style.touchAction = "";
			}, 500); // Match CSS transition duration
		}, 2000);
	}
	
	// Single event listener
	document.addEventListener("DOMContentLoaded", handleLoadingScreen, { once: true });
</script>

<style>
	html.loading {
		overflow: hidden !important;
		height: 100%;
		position: fixed;
		width: 100%;
	}

	#loading-screen {
		position: fixed;
		inset: 0;
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		backdrop-filter: blur(30px);
		-webkit-backdrop-filter: blur(30px);
		z-index: 9999;
		transition: opacity 0.5s ease;
	}

	#loading-screen.fade-out {
		opacity: 0;
		pointer-events: none;
	}
</style>

<!-- Loading overlay -->
<div id="loading-screen">
	<!-- Fixed heading (never disappears) -->
	<div
		class="text-center text-sm font-medium mb-4 dark:text-gray-300"
		id="read-mode-heading"
	>
		Entering read mode ðŸ¤“
	</div>

	<!-- Quotes section -->
	<div id="loading-message">
		<div
			id="loading-quote"
			class="italic text-center text-lg dark:text-gray-100 max-w-md mx-auto px-4"
		>
		</div>
		<div
			id="loading-author"
			class="mt-2 text-sm text-center dark:text-gray-300"
		>
		</div>
	</div>
</div>
<!-- <div class="text-transparent bg-clip-text bg-gradient-to-r from-accent-one to-accent-two font-medium text-center">
    
  </div> -->

<!-- Page layout -->
<PostLayout post={post} data-post-id={post.id}>
	<Content />
</PostLayout>
