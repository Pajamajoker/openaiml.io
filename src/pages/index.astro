---
import { type CollectionEntry, getCollection } from "astro:content";
//import SocialList from "@/components/SocialList.astro";
import MadeWithLove from "@/components/MadeWithLove.astro"
import PostPreview from "@/components/blog/PostPreview.astro";
import Note from "@/components/note/Note.astro";
import TweetEmbed from "@/components/TweetEmbed.astro";
import { getAllPosts } from "@/data/post";
import { trendingTweetIds } from "@/data/trendingTweets";
import { fetchTweetData } from "@/utils/twitter";
import PageLayout from "@/layouts/Base.astro";
import { collectionDateSort } from "@/utils/date";

// Posts
const MAX_POSTS = 10;
const allPosts = await getAllPosts();
const allPostsByDate = allPosts
	.sort(collectionDateSort)
	.slice(0, MAX_POSTS) as CollectionEntry<"post">[];

// Fetch trending tweets
const trendingTweets = await Promise.all(
	trendingTweetIds.map(id => {
		// Extract username from the tweet ID if available
		const username = id.includes('/') ? id.split('/')[0] : undefined;
		const tweetId = id.includes('/') ? id.split('/')[1] : id;
		return fetchTweetData(tweetId, username);
	})
);

// Filter out any null tweets
const validTweets = trendingTweets.filter((tweet): tweet is Tweet => tweet !== null);

// Notes
const MAX_NOTES = 2;
const allNotes = await getCollection("note");
const latestNotes = allNotes.sort(collectionDateSort).slice(0, MAX_NOTES);
---

<PageLayout meta={{ title: "Home" }}>
	<!-- Hero section -->
	<!-- Background blur -->
		<div class="absolute top-0 left-1/2 md:top-[-15%] -ml-[50vw] h-full w-full max-w-full pointer-events-none blur-3xl opacity-50 overflow-x-hidden">		<div class="absolute top-[10%] left-[-40%] w-[65%] h-full bg-gradient-to-b from-blue-300 via-pink-300 to-transparent rounded-full opacity-30 dark:opacity-10"></div>
		<div class="absolute top-[-20%] left-[-50%] w-[85%] h-full bg-gradient-to-b from-indigo-300 via-orange-300 to-transparent rounded-full opacity-60 dark:opacity-10"></div>
		<div class="absolute top-[-20%] right-[-50%] w-[85%] h-full bg-gradient-to-b from-orange-300 via-indigo-300 to-transparent rounded-full opacity-60 dark:opacity-10"></div>
	</div>
			<section class="max-w-xl mx-auto relative flex items-center justify-center min-h-[90vh] sm:min-h-[85vh] md:min-h-[75vh] lg:min-h-[70vh] px-4 sm:px-0 -mt-10">
			<div class="w-full text-center">
			<span class="title text-2xl bg-gradient-to-r from-accent-two/85 via-accent-one/85 to-accent-two/85 dark:from-accent-two dark:via-accent-one dark:to-accent-two bg-clip-text text-transparent">
			Welcome to OpenAI/ML!
			</span>
			<p class="mt-4 mb-4 text-medium font-medium"> 
				Open Source AI is Awesome. But the BS Hype? Not so much.
			</p>
			<p class="mt-4 mb-4 text-medium font-small">
				The AI/ML & Quantum world today is noisy: Half-baked open-source repos, flashy demos, closed models. I cut through that.
			</br>
			<!-- </p>
			<p class="mt-4 mb-4 text-sm font-small"> -->
				I focus on real, usable tools, solid research / white papers, build intuition around the math, and show what's actually useful in production.
			</p>
			
			<p class="mt-2 text-xs text-center max-w-sm mx-auto">
			'Open' means accessible code, transparent research, real alternatives to closed AI — and building solid intuition along the way
			</p>
			<!-- Find me on github thing -->
			<!-- <div class="flex justify-center mb-4">
				<SocialList />
			</div> -->
			<div class="flex justify-center mt-4 flex-col items-center">
				<form id="subscribe-form" class="flex items-center space-x-2">
					<input 
					id="email-input"
					type="email" 
					name="email" 
					required 
					placeholder="Enter your email" 
					class="px-4 py-2 h-10 rounded-lg shadow-md text-sm focus:outline-none w-full max-w-xs"
					/>
					<button 
					type="submit" 
					class="h-8 px-4 rounded-lg shadow-lg hover:brightness-110 transition-all bg-gradient-to-r from-accent-one to-accent-two text-bgColor font-semibold"
					>
					<span id="button-text">Subscribe</span>
					<span id="button-loader" class="hidden ml-2">
					<span class="inline-block animate-spin">⏳</span>
					</span>
					</button>
				</form>

				<!-- ✅ Now it appears *below* the form -->
				<p id="status-msg" class="mt-2 text-sm text-green-600 hidden">Subscribed successfully!</p>
			</div>
			<p class="mt-2 text-xs text-center max-w-sm mx-auto">
				No spam. No "basic" stuff. Just high-quality, "Open" content worth learning from, posted twice a week.  
				Subscribe if you're into AI, ML, or Quantum Computing.
			</p>
			
			<div class="flex justify-center mt-4">
				<a href="/posts/" class="relative flex items-center justify-center h-8 px-4 rounded-lg shadow-lg bg-special-lighter hover:brightness-110 hover:bg-special-lightest">
					<span class="bg-clip-text text-transparent font-semibold bg-gradient-to-r from-accent-one to-accent-two">
						Read Blogs
					</span>
				</a>
			</div>
			<p class="mt-2 text-xs text-center max-w-sm mx-auto flex items-center justify-center space-x-2">
			<img src="/icons/llama.png" alt="Llama Icon" class="w-6 h-6 inline-block" />
			<span>Now Featuring <strong>'Ask That Llama!'</strong> section — A list of curated prompts to ask your favorite LLM for more learnings!</span>
			</p>
			<div class="flex justify-center mb-4">
				<MadeWithLove />
			</div>
		</div>
	</section>

	<!-- Trending This Week Section -->
	{validTweets.length > 0 && (
		<section aria-label="Trending Today" class="mt-12 px-4 sm:px-0">
			<div class="mb-6">
				<h2 class="title text-xl text-accent-two">
					Trending Today
				</h2>
				<p class="text-sm text-textColor/60 mt-1">
					Stop scrolling mindlessly. These are the only curated tweets you need to see today.
				</p>
			</div>
			<div class="space-y-6">
				{validTweets.map((tweet) => (
					<TweetEmbed {...tweet} />
				))}
			</div>
		</section>
	)}

	<!-- Posts Section -->
	<section aria-label="Blog post list" class="mt-12 px-4 sm:px-0">
		<h2 class="title mb-6 text-xl text-accent-two">
			<a href="/posts/">Posts</a>
		</h2>
		<ul class="space-y-4 md:space-y-2" role="list">
			{
				allPostsByDate.map((p) => (
					<li class="gap-2 sm:grid-cols-[auto_1fr]">
						<PostPreview post={p} />
					</li>
				))
			}
		</ul>
	</section>

	<!-- Notes Section -->
	{
		latestNotes.length > 0 && (
			<section class="mt-12">
				<h2 class="title mb-6 text-accent-two">
					<a href="/notes/">Tools & Stack</a>
				</h2>
				<div class="grid grid-cols-1 gap-8 sm:grid-cols-2">
					{
						latestNotes.map((note) => (
							<div>
								<Note note={note} as="h4" isPreview />
							</div>
						))
					}
				</div>
			</section>
		)
	}

	<!-- Debug -->
	<!--
	<div class="flex justify-between flex-wrap gap-y-1.5 mt-6 text-sm font-medium">
		<div class="text-center content-center h-10 w-10 bg-color-50"><span class="text-textColor">50</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-75"><span class="text-textColor">75</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-100"><span class="text-textColor">100</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-150"><span class="text-textColor">150</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-200"><span class="text-textColor">200</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-250"><span class="text-textColor">250</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-300"><span class="text-textColor">300</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-350"><span class="text-textColor">350</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-400">
			<span class="text-textColor">400</span>
			<span class="text-bgColor">400</span>
		</div>
		<div class="text-center content-center h-10 w-10 bg-color-450">
			<span class="text-textColor">450</span>
			<span class="text-bgColor">450</span>
		</div>
		<div class="text-center content-center h-10 w-10 bg-color-500">
			<span class="text-textColor">500</span>
			<span class="text-bgColor">500</span>
		</div>
		<div class="text-center content-center h-10 w-10 bg-color-550"><span class="text-bgColor">550</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-600"><span class="text-bgColor">600</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-650"><span class="text-bgColor">650</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-700"><span class="text-bgColor">700</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-750"><span class="text-bgColor">750</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-800"><span class="text-bgColor">800</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-850"><span class="text-bgColor">850</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-900"><span class="text-bgColor">900</span></div>
	</div>
	-->
</PageLayout>

<script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>

<script>
  const form = document.getElementById('subscribe-form');
  const emailInput = document.getElementById('email-input');
  const statusMsg = document.getElementById('status-msg');
  const buttonText = document.getElementById('button-text');
  const buttonLoader = document.getElementById('button-loader');

  function launchConfetti() {
    const duration = 2.5 * 1000;
    const animationEnd = Date.now() + duration;
    const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 9999 };

    const interval = setInterval(function() {
      const timeLeft = animationEnd - Date.now();

      if (timeLeft <= 0) {
        return clearInterval(interval);
      }

      const particleCount = 50 * (timeLeft / duration);
      confetti({
        ...defaults,
        particleCount,
        origin: { x: Math.random(), y: Math.random() - 0.2 }
      });
    }, 250);
  }

  function blastRobots() {
  const robotCount = 100;

  for (let i = 0; i < robotCount; i++) {
    const robot = document.createElement('div');
    robot.textContent = '🤖';
    robot.style.position = 'fixed';
    robot.style.left = `${Math.random() * 100}vw`;
    robot.style.top = `-50px`; // Start slightly above viewport for smooth entry
    robot.style.fontSize = `${Math.random() * 24 + 24}px`;
    robot.style.zIndex = 9999;

    // Random delay before starting animation (0 to 4 seconds)
    const delay = Math.random() * 4000;
    const duration = 2 + Math.random() * 2; // 4-6 seconds fall time

    // Apply animation with delay
    robot.style.animation = `fall ${duration}s ease-out forwards`;
    robot.style.animationDelay = `${delay}ms`;

    document.body.appendChild(robot);

    // Remove robot after its animation finishes (delay + duration)
    setTimeout(() => robot.remove(), delay + duration * 1000);
  }

  if (window.navigator.vibrate) {
    window.navigator.vibrate(300);
  }
}

	const style = document.createElement('style');
	style.innerHTML = `
	@keyframes fall {
		from { transform: translateY(0) rotate(0deg); opacity: 1; }
		to { transform: translateY(110vh) rotate(360deg); opacity: 0; }
	}
	`;
	document.head.appendChild(style);
  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const email = emailInput.value;
    const secret = "your-super-secret-key";
    const endpoint = "https://script.google.com/macros/s/AKfycbxK28bL7ModFjNsbuS7oTkje9H-89MjEPCdTlc8Pt0o7J0CrQsIQ0ZlDL0c3HDk3ZBDBg/exec";

    // Show loader, hide button text
    buttonText.classList.add('hidden');
    buttonLoader.classList.remove('hidden');
    statusMsg.classList.add("hidden");

    try {
      const res = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'text/plain' },
        body: JSON.stringify({ email, action: 'subscribe', secret })
      });

      const text = await res.text();
      if (text.includes("Subscribed")) {
        statusMsg.textContent = "🎉 Subscribed successfully!";
        statusMsg.classList.remove("hidden");
        statusMsg.classList.replace("text-red-600", "text-green-600");
        emailInput.value = "";
        // 🎊 Trigger Confetti
		launchConfetti();
		blastRobots();

      } else {
        statusMsg.textContent = "⚠️ Error: " + text;
        statusMsg.classList.remove("hidden");
        statusMsg.classList.replace("text-green-600", "text-red-600");
      }
    } catch (err) {
      statusMsg.textContent = "❌ Network error. Please try again.";
      statusMsg.classList.remove("hidden");
      statusMsg.classList.replace("text-green-600", "text-red-600");
    }

    // Hide loader, show button text
    buttonText.classList.remove('hidden');
    buttonLoader.classList.add('hidden');
  });
</script>

