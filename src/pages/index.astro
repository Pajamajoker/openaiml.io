---
import { type CollectionEntry, getCollection } from "astro:content";
//import SocialList from "@/components/SocialList.astro";
import MadeWithLove from "@/components/MadeWithLove.astro"
import PostPreview from "@/components/blog/PostPreview.astro";
import Note from "@/components/note/Note.astro";
import TweetEmbed from "@/components/TweetEmbed.astro";
import { getAllPosts } from "@/data/post";
import PageLayout from "@/layouts/Base.astro";
import { collectionDateSort } from "@/utils/date";

// Posts
const MAX_POSTS = 10;
const allPosts = await getAllPosts();
const allPostsByDate = allPosts
	.sort(collectionDateSort)
	.slice(0, MAX_POSTS) as CollectionEntry<"post">[];

// Notes
const MAX_NOTES = 2;
const allNotes = await getCollection("note");
const latestNotes = allNotes.sort(collectionDateSort).slice(0, MAX_NOTES);

// Environment variables for client-side use
const subscribeSecret = import.meta.env.SUBSCRIBE_SECRET;
const subscribeEndpoint = import.meta.env.SUBSCRIBE_ENDPOINT;
---

<PageLayout meta={{ title: "Home" }}>
	<!-- Hero section -->
	<!-- Background blur -->
		<div class="absolute top-0 left-1/2 md:top-[-15%] -ml-[50vw] h-full w-full max-w-full pointer-events-none blur-3xl opacity-50 overflow-x-hidden">		<div class="absolute top-[10%] left-[-40%] w-[65%] h-full bg-gradient-to-b from-blue-300 via-pink-300 to-transparent rounded-full opacity-30 dark:opacity-10"></div>
		<div class="absolute top-[-20%] left-[-50%] w-[85%] h-full bg-gradient-to-b from-indigo-300 via-orange-300 to-transparent rounded-full opacity-60 dark:opacity-10"></div>
		<div class="absolute top-[-20%] right-[-50%] w-[85%] h-full bg-gradient-to-b from-orange-300 via-indigo-300 to-transparent rounded-full opacity-60 dark:opacity-10"></div>
	</div>
			<section class="relative flex items-center justify-center min-h-[90vh] sm:min-h-[85vh] md:min-h-[75vh] lg:min-h-[70vh] -mt-10">
			<div class="w-full text-center max-w-6xl mx-auto px-4 sm:px-0">
			<span class="title text-4xl bg-gradient-to-r from-accent-two/85 via-accent-one/85 to-accent-two/85 dark:from-accent-two dark:via-accent-one dark:to-accent-two bg-clip-text text-transparent">
			Welcome to OpenAI/ML!
			</span>
			<p class="mt-4 mb-4 text-2xl font-medium"> 
				Open Source AI is Awesome. But the BS Hype? Not so much.
			</p>
			<p class="mt-2 text-lg font-medium">
				The AI/ML world today is noisy: Half-baked open-source repos, flashy demos, closed models.
      </p>
      <p class="mt-0 text-lg font-medium">
        I cut through that.
      </p>
      <p class="mt-2 text-medium font-small text-center max-w-md mx-auto">
				I focus on real, usable tools, solid research / white papers, build intuition around the math and show what's actually useful in production.
			</p>
			
			<p class="mt-4 text-medium font-small text-center max-w-md mx-auto">
			'Open' means accessible code, transparent research, real alternatives to closed AI and all that while building solid intuition along the way
			</p>
			<!-- Find me on github thing -->
			<!-- <div class="flex justify-center mb-4">
				<SocialList />
			</div> -->
			<div class="flex justify-center mt-4 flex-col items-center">
				<form id="subscribe-form" class="flex items-center space-x-2">
					<input 
					id="email-input"
					type="email" 
					name="email" 
					required 
					placeholder="Enter your email" 
					class="px-4 py-2 h-10 rounded-lg shadow-md text-sm focus:outline-none w-full max-w-xs"
					/>
					<button 
					type="submit" 
					class="h-8 px-4 rounded-lg shadow-lg hover:brightness-110 transition-all bg-gradient-to-r from-accent-one to-accent-two text-bgColor font-semibold"
					>
					<span id="button-text">Subscribe</span>
					<span id="button-loader" class="hidden ml-2">
					<span class="inline-block animate-spin">‚è≥</span>
					</span>
					</button>
				</form>

				<!-- ‚úÖ Now it appears *below* the form -->
				<p id="status-msg" class="mt-2 text-sm text-green-600 hidden">Subscribed successfully!</p>
			</div>
			<p class="mt-2 text-medium text-center max-w-md mx-auto">
				No spam. No "basic" stuff. Just high-quality, 'Open' content worth learning from.
				Subscribe if you're into AI/ML tech and research!
			</p>
			
			<div class="flex justify-center mt-6">
				<a href="/posts/" class="relative flex items-center justify-center h-8 px-4 rounded-lg shadow-lg bg-special-lighter hover:brightness-110 hover:bg-special-lightest">
					<span class="bg-clip-text text-transparent font-semibold bg-gradient-to-r from-accent-one to-accent-two">
						Read Blogs
					</span>
				</a>
			</div>
			<p class="mt-6 text-base sm:text-lg text-center max-w-2xl mx-auto px-4">
				<div class="flex flex-col sm:flex-row items-center justify-center gap-2 sm:gap-3">
					<img src="/icons/llama.png" alt="Llama Icon" class="w-10 h-10 sm:w-10 sm:h-10" />
					<span>Now Featuring <strong>'Ask That Llama!'</strong> section ‚Äî A list of curated prompts to ask your favorite LLM for more learnings!</span>
				</div>
			</p>
			<p class="mt-4 text-base sm:text-lg text-center max-w-2xl mx-auto px-4">
        <div class="flex flex-col sm:flex-row items-center justify-center gap-2 sm:gap-3">
				<span>Also checkout the special <strong>'Emoji Tags'</strong> for more filtered content!</span>
        </div>
			</p>
			<p class="mt-4 text-medium text-center max-w-md mx-auto flex flex-wrap items-center justify-center gap-2">
				<a href="/tags/production-ready" class="inline-flex items-center px-2 py-1 bg-color-100 text-textColor hover:bg-accent-two hover:text-bgColor rounded-lg text-medium font-medium transition-colors">üöÄ Production-Ready</a>
				<a href="/tags/hyped" class="inline-flex items-center px-2 py-1 bg-color-100 text-textColor hover:bg-accent-two hover:text-bgColor rounded-lg text-medium font-medium transition-colors">ü§° Hyped</a>
				<a href="/tags/research-paper" class="inline-flex items-center px-2 py-1 bg-color-100 text-textColor hover:bg-accent-two hover:text-bgColor rounded-lg text-medium font-medium transition-colors">üîç Research Paper</a>
				<a href="/tags/game-changer" class="inline-flex items-center px-2 py-1 bg-color-100 text-textColor hover:bg-accent-two hover:text-bgColor rounded-lg text-medium font-medium transition-colors">üî• Game-Changer</a>
				<a href="/tags/experimental" class="inline-flex items-center px-2 py-1 bg-color-100 text-textColor hover:bg-accent-two hover:text-bgColor rounded-lg text-medium font-medium transition-colors">üß™ Experimental</a>
			</p>
			<div class="flex justify-center mb-2">
				<MadeWithLove />
			</div>
		</div>
	</section>

	<!-- Trending This Week Section -->
	<section aria-label="Trending Today" class="mt-4 px-4 sm:px-0">
		<div class="mb-4 text-center sm:text-left">
			<h2 class="title text-2xl text-accent-two">
				Trending Today
			</h2>
			<p class="text-lg text-textColor/60 mt-1">
				Stop scrolling mindlessly. These curated X posts are all you need, to stay up-to-date for today!
			</p>
		</div>
		<div id="tweets-container" class="space-y-6">
			<!-- Loading state -->
			<div id="tweets-loading" class="flex justify-center items-center py-8">
				<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-accent-two"></div>
				<span class="ml-3 text-sm text-textColor/60">Teaching my Llama to fetch X posts... ü¶ô‚ú®</span>
			</div>
			<!-- Error state -->
			<div id="tweets-error" class="hidden text-center py-8 text-red-500">
				Failed to load tweets. Please try again later.
			</div>
			<!-- Tweets will be inserted here -->
		</div>
	</section>

	<!-- Posts Section -->
	<section aria-label="Blog post list" class="mt-12 px-4 sm:px-0">
		<h2 class="title mb-6 text-xl text-accent-two">
			<a href="/posts/">Posts</a>
		</h2>
		<ul class="space-y-4 md:space-y-2" role="list">
			{
				allPostsByDate.map((p) => (
					<li class="gap-2 sm:grid-cols-[auto_1fr]">
						<PostPreview post={p} />
					</li>
				))
			}
		</ul>
	</section>

	<!-- Notes Section -->
	{
		latestNotes.length > 0 && (
			<section class="mt-12">
				<h2 class="title mb-6 text-accent-two">
					<a href="/tools/">Tools & Stack</a>
				</h2>
				<div class="grid grid-cols-1 gap-8 sm:grid-cols-2">
					{
						latestNotes.map((note) => (
							<div>
								<Note note={note} as="h4" isPreview />
							</div>
						))
					}
				</div>
			</section>
		)
	}

	<!-- Debug -->
	<!--
	<div class="flex justify-between flex-wrap gap-y-1.5 mt-6 text-sm font-medium">
		<div class="text-center content-center h-10 w-10 bg-color-50"><span class="text-textColor">50</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-75"><span class="text-textColor">75</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-100"><span class="text-textColor">100</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-150"><span class="text-textColor">150</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-200"><span class="text-textColor">200</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-250"><span class="text-textColor">250</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-300"><span class="text-textColor">300</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-350"><span class="text-textColor">350</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-400">
			<span class="text-textColor">400</span>
			<span class="text-bgColor">400</span>
		</div>
		<div class="text-center content-center h-10 w-10 bg-color-450">
			<span class="text-textColor">450</span>
			<span class="text-bgColor">450</span>
		</div>
		<div class="text-center content-center h-10 w-10 bg-color-500">
			<span class="text-textColor">500</span>
			<span class="text-bgColor">500</span>
		</div>
		<div class="text-center content-center h-10 w-10 bg-color-550"><span class="text-bgColor">550</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-600"><span class="text-bgColor">600</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-650"><span class="text-bgColor">650</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-700"><span class="text-bgColor">700</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-750"><span class="text-bgColor">750</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-800"><span class="text-bgColor">800</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-850"><span class="text-bgColor">850</span></div>
		<div class="text-center content-center h-10 w-10 bg-color-900"><span class="text-bgColor">900</span></div>
	</div>
	-->
</PageLayout>

<script is:inline define:vars={{ subscribeSecret, subscribeEndpoint }}>
  // Performance-optimized confetti and animations
  let confetti = null;
  let confettiLoaded = false;
  
  // Lightweight fallback confetti for mobile performance
  function createLightweightConfetti() {
    return function(options = {}) {
      const defaults = {
        particleCount: 20, // Reduced from 50
        spread: 360,
        origin: { x: 0.5, y: 0.5 },
        colors: ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57']
      };
      
      const config = { ...defaults, ...options };
      const particles = [];
      
      for (let i = 0; i < config.particleCount; i++) {
        const particle = document.createElement('div');
        particle.style.position = 'fixed';
        particle.style.left = `${config.origin.x * 100}%`;
        particle.style.top = `${config.origin.y * 100}%`;
        particle.style.width = '6px';
        particle.style.height = '6px';
        particle.style.backgroundColor = config.colors[Math.floor(Math.random() * config.colors.length)];
        particle.style.borderRadius = '50%';
        particle.style.pointerEvents = 'none';
        particle.style.zIndex = '9999';
        particle.style.transition = 'all 0.5s ease-out';
        
        document.body.appendChild(particle);
        particles.push(particle);
        
        // Use CSS transforms instead of requestAnimationFrame for better performance
        setTimeout(() => {
          const angle = (Math.random() * config.spread * Math.PI) / 180;
          const distance = 100 + Math.random() * 200;
          const x = Math.cos(angle) * distance;
          const y = Math.sin(angle) * distance;
          
          particle.style.transform = `translate(${x}px, ${y}px)`;
          particle.style.opacity = '0';
          
          setTimeout(() => particle.remove(), 500);
        }, Math.random() * 100);
      }
    };
  }
  
  // Load confetti only when needed (lazy loading)
  async function loadConfetti() {
    if (confettiLoaded) return;
    
    return new Promise((resolve) => {
      // Check if already loaded
      if (window.confetti) {
        confetti = window.confetti;
        confettiLoaded = true;
        resolve();
        return;
      }
      
      // Load confetti script dynamically
      const script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js';
      script.async = true;
      script.onload = () => {
        confetti = window.confetti;
        confettiLoaded = true;
        resolve();
      };
      script.onerror = () => {
        console.warn('Confetti library failed to load, using lightweight fallback');
        confetti = createLightweightConfetti();
        confettiLoaded = true;
        resolve();
      };
      document.head.appendChild(script);
    });
  }

  const form = document.getElementById('subscribe-form');
  const emailInput = document.getElementById('email-input');
  const statusMsg = document.getElementById('status-msg');
  const buttonText = document.getElementById('button-text');
  const buttonLoader = document.getElementById('button-loader');

  // Performance-optimized confetti launch
  async function launchConfetti() {
    await loadConfetti();
    
    if (!confetti) {
      console.warn('Confetti not available');
      return;
    }
    
    // Check if device is mobile for reduced performance
    const isMobile = window.innerWidth <= 768;
    const particleCount = isMobile ? 40 : 120; // Slightly increased
    const duration = isMobile ? 3500 : 4500; // Increased duration
    
    console.log('Launching confetti!');
    
    const animationEnd = Date.now() + duration;
    const defaults = { 
      startVelocity: 30, 
      spread: 360, 
      ticks: 60, 
      zIndex: 9999 
    };

    // Single burst instead of multiple
    try {
      confetti({
        ...defaults,
        particleCount,
        origin: { x: 0.5, y: 0.5 }
      });
    } catch (error) {
      console.error('Error launching confetti:', error);
    }

    // Optional second burst after delay
    setTimeout(() => {
      try {
        confetti({
          ...defaults,
          particleCount: Math.floor(particleCount * 0.6),
          origin: { x: 0.3, y: 0.5 }
        });
      } catch (error) {
        console.error('Error launching confetti:', error);
      }
    }, 800);
    
    // Third burst for more impact
    setTimeout(() => {
      try {
        confetti({
          ...defaults,
          particleCount: Math.floor(particleCount * 0.4),
          origin: { x: 0.7, y: 0.5 }
        });
      } catch (error) {
        console.error('Error launching confetti:', error);
      }
    }, 1500);
  }

  // Performance-optimized robot animation
  function blastRobots() {
    const isMobile = window.innerWidth <= 768;
    const robotCount = isMobile ? 25 : 60; // Slightly increased
    const robots = [];

    for (let i = 0; i < robotCount; i++) {
      const robot = document.createElement('div');
      robot.textContent = 'ü§ñ';
      robot.style.position = 'fixed';
      robot.style.left = `${Math.random() * 100}vw`;
      robot.style.top = `-50px`;
      robot.style.fontSize = `${Math.random() * 18 + 18}px`; // Slightly larger
      robot.style.zIndex = '9999';
      robot.style.transition = 'all 3s ease-out'; // Increased duration

      document.body.appendChild(robot);
      robots.push(robot);

      // Staggered animation with longer duration
      setTimeout(() => {
        robot.style.transform = `translateY(${window.innerHeight + 100}px) rotate(360deg)`;
        robot.style.opacity = '0';
        
        setTimeout(() => robot.remove(), 3000); // Increased cleanup time
      }, Math.random() * 1500); // Increased delay range
    }

    // Haptic feedback only on mobile
    if (isMobile && window.navigator.vibrate) {
      window.navigator.vibrate(200);
    }
  }

  const style = document.createElement('style');
  style.innerHTML = `
  /* Fix for tweet embed white corners */
  .tweet-container {
    background-color: var(--bgColor);
    border-radius: 12px;
    overflow: hidden;
  }
  .tweet-container iframe {
    border-radius: 12px !important;
  }
  `;
  document.head.appendChild(style);

  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      const email = emailInput.value;
      // Use environment variables passed from server
      const secret = subscribeSecret;
      const endpoint = subscribeEndpoint;

      // Show loader, hide button text
      if (buttonText) buttonText.classList.add('hidden');
      if (buttonLoader) buttonLoader.classList.remove('hidden');
      if (statusMsg) statusMsg.classList.add("hidden");

      try {
        const res = await fetch(endpoint, {
          method: 'POST',
          headers: { 'Content-Type': 'text/plain' },
          body: JSON.stringify({ email, action: 'subscribe', secret })
        });

        const text = await res.text();
        if (text.includes("Subscribed")) {
          if (statusMsg) {
            statusMsg.textContent = "üéâ Subscribed successfully!";
            statusMsg.classList.remove("hidden");
            statusMsg.classList.replace("text-red-600", "text-green-600");
          }
          if (emailInput) emailInput.value = "";
          
          // üéä Trigger optimized animations
          launchConfetti();
          blastRobots();
        } else {
          if (statusMsg) {
            statusMsg.textContent = "‚ö†Ô∏è Error: " + text;
            statusMsg.classList.remove("hidden");
            statusMsg.classList.replace("text-green-600", "text-red-600");
          }
        }
      } catch (err) {
        if (statusMsg) {
          statusMsg.textContent = "‚ùå Network error. Please try again.";
          statusMsg.classList.remove("hidden");
          statusMsg.classList.replace("text-green-600", "text-red-600");
        }
      }

      // Hide loader, show button text
      if (buttonText) buttonText.classList.remove('hidden');
      if (buttonLoader) buttonLoader.classList.add('hidden');
    });
  }

  // Function to fetch and display tweets
  async function fetchAndDisplayTweets() {
    const container = document.getElementById('tweets-container');
    const loading = document.getElementById('tweets-loading');
    const error = document.getElementById('tweets-error');

    if (!container || !loading || !error) {
      console.error('Required DOM elements not found');
      return;
    }

    try {
      const response = await fetch('https://script.google.com/macros/s/AKfycbxWWV1ZXFxNat0ePrBFonW-KvY95RiCnoJrpc32JH3VwhfoK6adVoZ1FeF7RlKkC-4etw/exec');
      const text = await response.text();
      
      // Split the text response into an array of tweet IDs
      const tweetIds = text.split('\n').filter(id => id.trim());

      if (!tweetIds || tweetIds.length === 0) {
        container.innerHTML = '<p class="text-center text-textColor/60">No trending tweets available at the moment.</p>';
        return;
      }

      // Clear loading state
      loading.classList.add('hidden');

      // Create tweet elements
      const tweetsContent = document.createElement('div');
      tweetsContent.className = 'tweets-content space-y-6';
      
      tweetIds.forEach((tweetId) => {
        const username = tweetId.includes('/') ? tweetId.split('/')[0] : 'i';
        const id = tweetId.includes('/') ? tweetId.split('/')[1] : tweetId;
        
        const tweetElement = document.createElement('div');
        tweetElement.className = 'tweet-container flex justify-center';
        tweetElement.innerHTML = `
          <blockquote class="twitter-tweet" data-dnt="true" data-theme="dark">
            <a href="https://twitter.com/${username}/status/${id}"></a>
          </blockquote>
        `;
        tweetsContent.appendChild(tweetElement);
      });

      // Clear container and add new content
      container.innerHTML = '';
      container.appendChild(tweetsContent);

      // Load Twitter widgets
      if (window.twttr) {
        window.twttr.widgets.load();
      }
    } catch (err) {
      console.error('Error fetching tweets:', err);
      loading.classList.add('hidden');
      error.classList.remove('hidden');
    }
  }

  // Lazy load Twitter widgets when section comes into view
  function loadTwitterWidgets() {
    const script = document.createElement('script');
    script.src = 'https://platform.twitter.com/widgets.js';
    script.async = true;
    script.onload = () => {
      console.log('Twitter widget script loaded');
      fetchAndDisplayTweets();
    };
    script.onerror = (error) => {
      console.error('Error loading Twitter widget script:', error);
    };
    document.head.appendChild(script);
  }

  // Use Intersection Observer to lazy load Twitter widgets
  const tweetsSection = document.getElementById('tweets-container');
  if (tweetsSection && 'IntersectionObserver' in window) {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          loadTwitterWidgets();
          observer.unobserve(entry.target);
        }
      });
    }, { rootMargin: '100px' });
    
    observer.observe(tweetsSection);
  } else {
    // Fallback for browsers without Intersection Observer
    loadTwitterWidgets();
  }
</script>

